{"version":3,"sources":["components/Header/index.js","components/Container/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","children","score","highscore","Container","Card","onClick","beenClicked","id","alt","name","src","image","App","state","characters","gameEnd","_this","forEach","character","clicked","alert","concat","setState","find","element","location","console","log","sort","Math","random","_this2","this","components_Container","components_Header","map","components_Card","key","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4/DAiBeA,SAdA,SAAAC,GACX,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,WAEfJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,wBADA,IACyBH,EAAMM,MAD/B,IACsCL,EAAAC,EAAAC,cAAA,4BADtC,IACmEH,EAAMO,cCClEC,SARG,SAAAR,GACd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVJ,EAAMK,YCQJI,SAXF,SAAAT,GACT,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOM,QAAS,kBAAMV,EAAMW,YAAYX,EAAMY,MACzDX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKU,IAAKb,EAAMc,KAAMC,IAAKf,EAAMgB,mBCsElCC,oNArEbC,MAAQ,CACNC,aACAb,MAAO,EACPC,UAAW,KAEba,QAAU,WAYR,OAVAC,EAAKH,MAAMC,WAAWG,QAAQ,SAAAC,GAC5BA,EAAUC,SAAU,IAEtBC,MAAK,2CAAAC,OAA4CL,EAAKH,MAAMZ,QAEzDe,EAAKH,MAAMZ,MAAQe,EAAKH,MAAMX,YAC/Bc,EAAKM,SAAS,CAACpB,UAAWc,EAAKH,MAAMZ,QACrCmB,MAAM,mBAERJ,EAAKM,SAAS,CAACrB,MAAO,KACf,KAETK,YAAc,SAAAC,GACZS,EAAKH,MAAMC,WAAWS,KAAK,SAACC,EAASC,GACnC,GAAID,EAAQjB,KAAOA,EAAI,CAErB,GADAmB,QAAQC,IAAIH,EAAQf,KAAO,uBACS,IAAjCK,EAAWW,GAAUN,QAKtB,OAJAL,EAAWW,GAAUN,SAAU,EAC/BH,EAAKM,SAAS,CAACrB,MAAOe,EAAKH,MAAMZ,MAAQ,IAEzCe,EAAKH,MAAMC,WAAWc,KAAK,iBAAM,GAAMC,KAAKC,YACrC,EAEPd,EAAKD,sFAMJ,IAAAgB,EAAAC,KACP,OACEpC,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACmC,EAAD,KACArC,EAAAC,EAAAC,cAACoC,EAAD,CACAjC,MAAS+B,KAAKnB,MAAMZ,MACpBC,UAAa8B,KAAKnB,MAAMX,WAFxB,qBAOG8B,KAAKnB,MAAMC,WAAWqB,IAAK,SAAAjB,GAC1B,OACEtB,EAAAC,EAAAC,cAACsC,EAAD,CACEC,IAAKnB,EAAUX,GACfA,GAAIW,EAAUX,GACdE,KAAMS,EAAUT,KAChBE,MAAOO,EAAUP,MACjBL,YAAayB,EAAKzB,yBAxDhBgC,cCKEC,QACW,cAA7BC,OAAOf,SAASgB,UAEe,UAA7BD,OAAOf,SAASgB,UAEhBD,OAAOf,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.42b6138c.chunk.js","sourcesContent":["import React from 'react'\nimport './style.css'\n\nconst Header = props => {\n    return (\n    <div className=\"header\">\n        <div className=\"title \">\n            <h2>{props.children}</h2>\n        </div>\n        <div className=\"scores\">\n        <strong>Score:</strong> {props.score} <strong>HighScore:</strong> {props.highscore}\n        \n        </div>\n    </div>\n    )\n}\n\nexport default Header;","import React from 'react'\nimport './style.css'\n\nconst Container = props => {\n    return (\n        <div className=\"container\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Container;","import React from \"react\";\nimport \"./style.css\";\n\nconst Card = props => {\n    return (\n        <div className=\"card\" onClick={() => props.beenClicked(props.id)}>\n            <div>\n                <img alt={props.name} src={props.image} />\n            </div>\n        </div>\n    )\n}\n\n\nexport default Card;","import React, { Component } from 'react';\nimport Header from './components/Header'\nimport Container from './components/Container'\nimport Card from './components/Card'\nimport characters from './characters.json'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    characters,\n    score: 0,\n    highscore: 0\n  }\n  gameEnd = () => {\n    \n    this.state.characters.forEach(character => {\n      character.clicked = false;\n    });\n    alert(`Oops you already Clicked that! \\nscore: ${this.state.score}`);\n\n    if(this.state.score > this.state.highscore){\n      this.setState({highscore: this.state.score})\n      alert('New highscore!')\n    }\n    this.setState({score: 0});\n    return true;\n  }\n  beenClicked = id => {\n    this.state.characters.find((element, location) => {\n      if (element.id === id) {\n        console.log(element.name + \" has been clicked!\")\n        if(characters[location].clicked === false){\n          characters[location].clicked = true;\n          this.setState({score: this.state.score + 1})\n\n          this.state.characters.sort(() => 0.5 - Math.random())\n          return true; \n        } else {\n          this.gameEnd()\n        }\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        \n        <Container>\n        <Header\n        score = {this.state.score}\n        highscore = {this.state.highscore}\n        >\n        \n          Anime Clicky Game\n        </Header>\n          {this.state.characters.map( character => {\n            return (\n              <Card\n                key={character.id}\n                id={character.id}\n                name={character.name}\n                image={character.image}\n                beenClicked={this.beenClicked}\n                />\n\n            )\n          })}\n          \n        </Container>\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}